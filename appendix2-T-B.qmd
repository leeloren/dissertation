---
title: "T-B"
---

# Oxford, Bodleian, Canonici Misc. 74

```{r setup, include=FALSE}
# Load the xml2 package
library(xml2)
```

::: {.column-body-outset}
::: {layout="[[6,6,6,6]]"}

::: {.column}
## Nearly Diplomatic

```{r results='asis'}
# START OF "NEARLY DIPLOMATIC" CODE
# Read the XML content
xml_file <- read_xml("data/T-B-nearly_diplomatic.xml")

# Extract <l>, <cb>, and <pb> elements
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Function to process each element
process_line <- function(line) {
  
  # Handle column breaks
  if (xml_name(line) == "cb") {
    return("<div class='column-break'></div>")
  }
  
    # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Process choice elements
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    orig_text <- xml_text(xml_find_first(choice, ".//orig"))
    xml_set_text(choice, orig_text)
  }
  
  # Remove reg elements
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Return processed line text
  return(sprintf("<div style='line-height: 1.2;'>%s</div>", xml_text(line)))
}

# Process each line
for (line in lines) {
  processed_lines <- c(processed_lines, process_line(line))
}

# Format and print
formatted_text <- paste(processed_lines, collapse = "\n")
cat(formatted_text)

```
:::

::: {.column}
## Minimal

```{r results='asis'}
# START OF "MINIMAL" CODE
# Read the XML content
xml_file <- read_xml("data/T-B.xml")

# Extract both <l>, <cb>, and <pb> elements
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.895 to correct spacing
    if (line_count == 895) {
      return("<div style='line-height: 1.2;'>Dame Zosimas lirespot .</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <orig> tag
    orig_text <- xml_text(xml_find_first(choice, ".//orig"))
    # Remove the <choice> element and replace it with the text from the <orig> tag
    xml_set_text(choice, paste0(orig_text, " "))
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Intermediate

```{r results='asis'}
# START OF "INTERMEDIATE" CODE
# Read the XML content
xml_file <- read_xml("data/T-B.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.895 to correct spacing
    if (line_count == 895) {
      return("<div style='line-height: 1.2;'>Dame Zosimas li respont .</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Check if the <choice> element contains <abbr> and <expan>
    abbr_exists <- xml_find_first(choice, ".//abbr")
    expan_exists <- xml_find_first(choice, ".//expan")
    
    if (!is.na(abbr_exists) && !is.na(expan_exists)) {
      # If <abbr> and <expan> tags exist, extract only the <reg> text from <expan>
      reg_text <- xml_text(xml_find_first(choice, ".//expan/reg"))
      xml_set_text(choice, paste0(reg_text, " "))
    } else {
      # For non-abbreviation choices, keep original behavior
      orig_text <- xml_text(xml_find_first(choice, ".//orig"))
      xml_set_text(choice, paste0(orig_text, " "))
    }
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Extensive

```{r results='asis'}
# START OF "EXTENSIVE" CODE
# Read the XML content
xml_file <- read_xml("data/T-B.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.184 to correct double "Creator"
    if (line_count == 184) {
      return("<div style='line-height: 1.2;'>cant de se Creator n'at cure</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.371 to correct double "Deus"
    if (line_count == 371) {
      return("<div style='line-height: 1.2;'>seit ke Deus est ver li iriez.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.376 to correct double "Deus"
    if (line_count == 376) {
      return("<div style='line-height: 1.2;'>por quoi Deus est ver vos iriez</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.378 to correct double "Creator"
    if (line_count == 378) {
      return("<div style='line-height: 1.2;'>cant men Creator ai perdu</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.393 to correct double "Marie"
    if (line_count == 393) {
      return("<div style='line-height: 1.2;'>cant il te dist ave Marie.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.394 to correct double "Deu grasce"
    if (line_count == 394) {
      return("<div style='line-height: 1.2;'>de la Deu grasce raemplie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.419 to correct double "Peres"
    if (line_count == 419) {
      return("<div style='line-height: 1.2;'>Il fut tes Fiz si fut tes Peres.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.461 to correct double "Pere"
    if (line_count == 461) {
      return("<div style='line-height: 1.2;'>d’iluc les condost a sen Pere.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.470 to correct double "Pere"
    if (line_count == 470) {
      return("<div style='line-height: 1.2;'>en ciel monta puis a sen Pere</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.475 to correct double "Pere"
    if (line_count == 475) {
      return("<div style='line-height: 1.2;'>or siet a la destre sen Pere.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.558 to correct double "Deus"
    if (line_count == 558) {
      return("<div style='line-height: 1.2;'>se Deus ne li fait altre aie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.566 to correct double "Damledeu"
    if (line_count == 566) {
      return("<div style='line-height: 1.2;'>a Damledeu se comandoit</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.666 to correct double "Deu"
    if (line_count == 666) {
      return("<div style='line-height: 1.2;'>a Deu avoient lor tresor</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.680 to correct double "Damledeu"
    if (line_count == 680) {
      return("<div style='line-height: 1.2;'>a Damledeu les comandoit</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.689 to correct double "Deu"
    if (line_count == 689) {
      return("<div style='line-height: 1.2;'>en Deu avoient grant amor.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.690 to correct double "Deu"
    if (line_count == 690) {
      return("<div style='line-height: 1.2;'>de Deu vivoient li plusor</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.736 to correct double "Damledeu"
    if (line_count == 736) {
      return("<div style='line-height: 1.2;'>A Damledeu les comandat</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.767 to correct double "Felon"
    if (line_count == 767) {
      return("<div style='line-height: 1.2;'>Que le defende del Felon.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.770 to correct double "Marie"
    if (line_count == 770) {
      return("<div style='line-height: 1.2;'>La figure vit de Marie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.771 to correct double "Marie"
    if (line_count == 771) {
      return("<div style='line-height: 1.2;'>de Marie vit la figure.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.792 to correct double "Deu"
    if (line_count == 792) {
      return("<div style='line-height: 1.2;'>se tu en Deu as nule foi</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.793 to correct double "De le grant"
    if (line_count == 793) {
      return("<div style='line-height: 1.2;'>Je te conjur par De le grant.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.795 to correct double "Deu"
    if (line_count == 795) {
      return("<div style='line-height: 1.2;'>cant la dame ot de Deu parler .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.895 to correct spacing
    if (line_count == 895) {
      return("<div style='line-height: 1.2;'>Dame Zosimas li respont .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.932 to correct double "Deu"
    if (line_count == 932) {
      return("<div style='line-height: 1.2;'>en Deu ai tote ma fiance</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.944 to correct double "Deu"
    if (line_count == 944) {
      return("<div style='line-height: 1.2;'>por Deu Dame nel celez mie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.961 to correct double "Creator"
    if (line_count == 961) {
      return("<div style='line-height: 1.2;'>Mercit en rent a Creator.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.964 to correct double "Deu"
    if (line_count == 964) {
      return("<div style='line-height: 1.2;'>por Deu te pri ke tu t’en liez</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.970 to correct double "Deu"
    if (line_count == 970) {
      return("<div style='line-height: 1.2;'>por Deu aies de moi merci</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1110 to correct double "Deu"
    if (line_count == 1110) {
      return("<div style='line-height: 1.2;'>qu’il la li die por Deu</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1134 to correct double "Deu"
    if (line_count == 1134) {
      return("<div style='line-height: 1.2;'>por Deu toi pri done le moi</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1183 to correct double "Deu"
    if (line_count == 1183) {
      return("<div style='line-height: 1.2;'>Dame dist il a Deu plaisir.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1198 to correct double "Marie"
    if (line_count == 1198) {
      return("<div style='line-height: 1.2;'>en alat l’arme de Marie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1230 to correct double "Deu"
    if (line_count == 1230) {
      return("<div style='line-height: 1.2;'>sel sevelis a Deu aie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1249 to correct double "Deus"
    if (line_count == 1249) {
      return("<div style='line-height: 1.2;'>bien seit ke Deus li at tremis.</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1316 to correct double "Marie"
    if (line_count == 1316) {
      return("<div style='line-height: 1.2;'>por le deserte de Marie</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Now we want to remove any <orig> elements entirely
  orig_elements <- xml_find_all(line, ".//orig")
  xml_remove(orig_elements)
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <reg> tag
    reg_text <- xml_text(xml_find_first(choice, ".//reg"))
    # Replace the <choice> element with the text from the <reg> tag
    xml_set_text(choice, paste0(" ", reg_text, " "))
  }
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: :::
