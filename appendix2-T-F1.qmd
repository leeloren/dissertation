---
title: "T-F^1^"
---

# Manchester, John Rylands Library, French 6

Digitization available via The University of Manchester [HERE](https://luna.manchester.ac.uk/luna/servlet/detail/Man4MedievalVC~4~4~994331~227074?sort=reference_number%2Cimage_sequence_number%2Cparent_work_title%2Cdate_created&qvq=q:French%206;sort:reference_number%2Cimage_sequence_number%2Cparent_work_title%2Cdate_created;lc:Man4MedievalVC~4~4&mi=1&trs=4).

```{r setup, include=FALSE}
# Load the xml2 package
library(xml2)
```

::: {.column-body-outset}
::: {layout="[[6,6,6,6]]"}

::: {.column}
## Nearly Diplomatic

```{r results='asis'}
# START OF "NEARLY DIPLOMATIC" CODE
# Read the XML content
xml_file <- read_xml("data/T-F1-nearly_diplomatic.xml")

# Extract <l>, <cb>, and <pb> elements
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Function to process each element
process_line <- function(line) {
  
  # Handle column breaks
  if (xml_name(line) == "cb") {
    return("<div class='column-break'></div>")
  }
  
    # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Process choice elements
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    orig_text <- xml_text(xml_find_first(choice, ".//orig"))
    xml_set_text(choice, orig_text)
  }
  
  # Remove reg elements
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Return processed line text
  return(sprintf("<div style='line-height: 1.2;'>%s</div>", xml_text(line)))
}

# Process each line
for (line in lines) {
  processed_lines <- c(processed_lines, process_line(line))
}

# Format and print
formatted_text <- paste(processed_lines, collapse = "\n")
cat(formatted_text)

```
:::

::: {.column}
## Minimal

```{r results='asis'}
# START OF "MINIMAL" CODE
# Read the XML content
xml_file <- read_xml("data/T-F1.xml")

# Extract both <l>, <cb>, and <pb> elements
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      
    # SPECIAL CASE: Hard-code line v.134 to fix nesting tags issue
    if (line_count == 134) {
      return("<div style='line-height: 1.2;'>sentdonouet dono vent gnt colees .</div>")
    }
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <orig> tag
    orig_text <- xml_text(xml_find_first(choice, ".//orig"))
    # Remove the <choice> element and replace it with the text from the <orig> tag
    xml_set_text(choice, paste0(orig_text, " "))
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Intermediate

```{r results='asis'}
# START OF "INTERMEDIATE" CODE
# Read the XML content
xml_file <- read_xml("data/T-F1.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
      
    # SPECIAL CASE: Hard-code line v.10 to correct apostrophe
    if (line_count == 10) {
      return("<div style='line-height: 1.2;'>e por samor mei escoter .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.36 to correct apostrophe
    if (line_count == 36) {
      return("<div style='line-height: 1.2;'>Qui tuz jurz dort & nent se veille .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.38 to correct apostrophe
    if (line_count == 38) {
      return("<div style='line-height: 1.2;'>Desquil sent al quer la mort .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.65 to correct apostrophe
    if (line_count == 65) {
      return("<div style='line-height: 1.2;'>Por co quele esteit bele & gente .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.67 to correct apostrophe
    if (line_count == 67) {
      return("<div style='line-height: 1.2;'>Quele fe seit tot sun pleisir .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.99 to correct apostrophe
    if (line_count == 99) {
      return("<div style='line-height: 1.2;'>Desquele out passe duze anz .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.128 to correct apostrophe
    if (line_count == 128) {
      return("<div style='line-height: 1.2;'>e rent si espris de samor .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.131 to correct apostrophe
    if (line_count == 131) {
      return("<div style='line-height: 1.2;'>por co quil erent si ami .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.134 to fix nesting tags issue
    if (line_count == 134) {
      return("<div style='line-height: 1.2;'>sentredonouent dono vent grant colees .</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.156 to correct apostrophe
    if (line_count == 156) {
      return("<div style='line-height: 1.2;'>Si cum est en lescripture .</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Check if the <choice> element contains <abbr> and <expan>
    abbr_exists <- xml_find_first(choice, ".//abbr")
    expan_exists <- xml_find_first(choice, ".//expan")
    
    if (!is.na(abbr_exists) && !is.na(expan_exists)) {
      # If <abbr> and <expan> tags exist, extract only the <reg> text from <expan>
      reg_text <- xml_text(xml_find_first(choice, ".//expan/reg"))
      xml_set_text(choice, paste0(reg_text, " "))
    } else {
      # For non-abbreviation choices, keep original behavior
      orig_text <- xml_text(xml_find_first(choice, ".//orig"))
      xml_set_text(choice, paste0(orig_text, " "))
    }
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Extensive

```{r results='asis'}
# START OF "EXTENSIVE" CODE
# Read the XML content
xml_file <- read_xml("data/T-F1.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      
    # SPECIAL CASE: Hard-code line v.134 to fix nesting tags issue
    if (line_count == 134) {
      return("<div style='line-height: 1.2;'>s’entredonouent grant colees .</div>")
    } 
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Now we want to remove any <orig> elements entirely
  orig_elements <- xml_find_all(line, ".//orig")
  xml_remove(orig_elements)
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <reg> tag
    reg_text <- xml_text(xml_find_first(choice, ".//reg"))
    # Replace the <choice> element with the text from the <reg> tag
    xml_set_text(choice, paste0(" ", reg_text, " "))
  }
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: :::
