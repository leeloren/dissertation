---
title: "T-E"
format:
  html:
    page-layout: full
---

# Paris, BnF Arsenal, 3516

Digitization available via Gallica [HERE](https://gallica.bnf.fr/ark:/12148/btv1b55000507q/f232.item).

```{r setup, include=FALSE}
# Load the xml2 package
library(xml2)
```

::: {.column-page-outset}
::: {layout="[[6,6,6]]"}

::: {.column}
## Minimal

```{r results='asis'}
# START OF "MINIMAL" CODE
# Read the XML content
xml_file <- read_xml("data/T-E.xml")

# Extract both <l>, <cb>, and <pb> elements
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
      
    # SPECIAL CASE: Hard-code line v.366 to fix "]cio(n)" repetition
    if (line_count == 366) {
      return("<div style='line-height: 1.2;'>Nonpas p bone ente [] cio</div>")
    }  
      
    # SPECIAL CASE: Hard-code line v.439 to correct spacing
    if (line_count == 439) {
      return("<div style='line-height: 1.2;'>Virge roine jo croi bien</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.523 to fix "Virge Roine" spacing
    if (line_count == 523) {
      return("<div style='line-height: 1.2;'>Virge Roine coronee</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.703 to correct nesting/repetition issue
    if (line_count == 703) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>O</span>rlairomes ci demarie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1495 to fix "Sire Deus" spacing
    if (line_count == 1495) {
      return("<div style='line-height: 1.2;'>Sire Deus loes foiestu</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <orig> tag
    orig_text <- xml_text(xml_find_first(choice, ".//orig"))
    # Remove the <choice> element and replace it with the text from the <orig> tag
    xml_set_text(choice, paste0(orig_text, " "))
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Intermediate

```{r results='asis'}
# START OF "INTERMEDIATE" CODE
# Read the XML content
xml_file <- read_xml("data/T-E.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.5 to correct apostrophe
    if (line_count == 5) {
      return("<div style='line-height: 1.2;'>Bien croi que volentiers lorront</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.38 to correct apostrophe
    if (line_count == 38) {
      return("<div style='line-height: 1.2;'>tant quil sent al cuer lamort</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.65 to correct apostrophe
    if (line_count == 65) {
      return("<div style='line-height: 1.2;'>Por ce quel est tant bele & gente</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.78 to correct apostrophe
    if (line_count == 78) {
      return("<div style='line-height: 1.2;'>Nient plus quun trespas de vent</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.94 to correct apostrophe
    if (line_count == 94) {
      return("<div style='line-height: 1.2;'>Jamais anul jor nen ert lies</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.95 to correct apostrophe
    if (line_count == 95) {
      return("<div style='line-height: 1.2;'>& maldist tote saventure</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.99 to correct apostrophe
    if (line_count == 99) {
      return("<div style='line-height: 1.2;'>tresquele avoit passe -xii- anz</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.104 to correct apostrophe
    if (line_count == 104) {
      return("<div style='line-height: 1.2;'>puis noirent parler de li</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.114 to correct apostrophe
    if (line_count == 114) {
      return("<div style='line-height: 1.2;'>des jovencels avoit lamor</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.131 to correct apostrophe
    if (line_count == 131) {
      return("<div style='line-height: 1.2;'>Que devant sen huis en lentree</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.133 to correct apostrophe
    if (line_count == 133) {
      return("<div style='line-height: 1.2;'>par ce quil erent si ami</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.136 to correct apostrophe
    if (line_count == 136) {
      return("<div style='line-height: 1.2;'>Sentredonoient grant colees</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.204 to correct apostrophe
    if (line_count == 204) {
      return("<div style='line-height: 1.2;'>lamoient tot por sa biaute</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.212 to correct apostrophe
    if (line_count == 212) {
      return("<div style='line-height: 1.2;'>Quele ert de haut parente</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.260 to correct apostrophe
    if (line_count == 260) {
      return("<div style='line-height: 1.2;'>Si com lemenoit saventure</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.272 to correct apostrophe
    if (line_count == 272) {
      return("<div style='line-height: 1.2;'>Ci sui venue dautre regne</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.294 to correct apostrophe
    if (line_count == 294) {
      return("<div style='line-height: 1.2;'>Tres quil vindrent en haute mer</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.352 to correct apostrophe
    if (line_count == 352) {
      return("<div style='line-height: 1.2;'>por co quele ert bele & gente</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.357 to correct apostrophe
    if (line_count == 357) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='1'>L</span>i jors vint de lAcension</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.359 to correct apostrophe
    if (line_count == 359) {
      return("<div style='line-height: 1.2;'>des pelerins doutre lemer</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.366 to fix "]cio(n)" repetition
    if (line_count == 366) {
      return("<div style='line-height: 1.2;'>Nonpas par bone enten [] cion</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.370 to correct apostrophe
    if (line_count == 370) {
      return("<div style='line-height: 1.2;'>o eus neust ja compaignie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.386 to correct apostrophe
    if (line_count == 386) {
      return("<div style='line-height: 1.2;'>Que doit quele nipuet entrer</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.439 to correct spacing
    if (line_count == 439) {
      return("<div style='line-height: 1.2;'>Virge roine jo croi bien</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.477 to correct apostrophe
    if (line_count == 477) {
      return("<div style='line-height: 1.2;'>dist quil estoit li Aignels Dei</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.523 to fix "Virge Roine" spacing
    if (line_count == 523) {
      return("<div style='line-height: 1.2;'>Virge Roine coronee</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.646 to remove apostrophe in "qu'il"
    if (line_count == 646) {
      return("<div style='line-height: 1.2;'>Nient plus quil est en .i. gans</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.650 to remove apostrophe in "qu'ele"
    if (line_count == 650) {
      return("<div style='line-height: 1.2;'>asdens les ront quele ot trencans</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.690 to remove apostrophe in "qu'ele"
    if (line_count == 690) {
      return("<div style='line-height: 1.2;'>Quele jadis soloit amer</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.703 to correct nesting/repetition issue
    if (line_count == 703) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>O</span>r lairommes ci demarie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.714 to correct apostrophe
    if (line_count == 714) {
      return("<div style='line-height: 1.2;'>Navoient pas vestu stamine</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.729 to correct apostrophe
    if (line_count == 729) {
      return("<div style='line-height: 1.2;'>Navoient soig dargent ne dor</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.750 to correct apostrophe
    if (line_count == 750) {
      return("<div style='line-height: 1.2;'>Quil cremissent de lor maison</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.819 to correct apostrophe
    if (line_count == 819) {
      return("<div style='line-height: 1.2;'>& vit que nul nen pot trover</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.820 to correct apostrophe
    if (line_count == 820) {
      return("<div style='line-height: 1.2;'>Not corage davant aler</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.832 to correct apostrophe
    if (line_count == 832) {
      return("<div style='line-height: 1.2;'>Qui plus valoit cargent neor</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.844 to correct apostrophe
    if (line_count == 844) {
      return("<div style='line-height: 1.2;'>tant ert blance com flor despine</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.845 to correct apostrophe
    if (line_count == 845) {
      return("<div style='line-height: 1.2;'>li blanc cevoil nierent trecies</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.872 to correct apostrophe
    if (line_count == 872) {
      return("<div style='line-height: 1.2;'>Son vis nosa torner vers lomme</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.883 to correct apostrophe
    if (line_count == 883) {
      return("<div style='line-height: 1.2;'>de lautre part Marie estoit</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.926 to correct apostrophe
    if (line_count == 926) {
      return("<div style='line-height: 1.2;'>par la barbe quil ot chenue</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.944 to correct apostrophe
    if (line_count == 944) {
      return("<div style='line-height: 1.2;'>& li vins sans quen issi fors</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.947 to correct apostrophe
    if (line_count == 947) {
      return("<div style='line-height: 1.2;'>Car tu las servi de tenfance</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1008 to correct apostrophe
    if (line_count == 1008) {
      return("<div style='line-height: 1.2;'>bieaus chiers pare por coi ten vas</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1037 to correct apostrophe
    if (line_count == 1037) {
      return("<div style='line-height: 1.2;'>Endementres quele li conte</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1038 to correct apostrophe
    if (line_count == 1038) {
      return("<div style='line-height: 1.2;'>bien poes croi re quele ot honte</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1085 to correct apostrophe
    if (line_count == 1085) {
      return("<div style='line-height: 1.2;'>perequant tu maporteras</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1148 to correct apostrophe
    if (line_count == 1148) {
      return("<div style='line-height: 1.2;'>mais en cor nen iavoit mie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1224 to correct apostrophe
    if (line_count == 1224) {
      return("<div style='line-height: 1.2;'>par le sanc quissi de saplaie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1282 to correct apostrophe
    if (line_count == 1282) {
      return("<div style='line-height: 1.2;'>Quele navoit mangie de ble</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1360 to correct apostrophe
    if (line_count == 1360) {
      return("<div style='line-height: 1.2;'>pres ert delcors nen veoit mie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1364 to correct apostrophe
    if (line_count == 1364) {
      return("<div style='line-height: 1.2;'>Navant na riere nen irai</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1390 to correct apostrophe
    if (line_count == 1390) {
      return("<div style='line-height: 1.2;'>poi sen faloit que niert totnu</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1493 to correct apostrophe
    if (line_count == 1493) {
      return("<div style='line-height: 1.2;'>Quant Zosimaslen vit torner</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1495 to fix "Sire Deus" spacing
    if (line_count == 1495) {
      return("<div style='line-height: 1.2;'>Sire Deus loes foiestu</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Check if the <choice> element contains <abbr> and <expan>
    abbr_exists <- xml_find_first(choice, ".//abbr")
    expan_exists <- xml_find_first(choice, ".//expan")
    
    if (!is.na(abbr_exists) && !is.na(expan_exists)) {
      # If <abbr> and <expan> tags exist, extract only the <reg> text from <expan>
      reg_text <- xml_text(xml_find_first(choice, ".//expan/reg"))
      xml_set_text(choice, paste0(reg_text, " "))
    } else {
      # For non-abbreviation choices, keep original behavior
      orig_text <- xml_text(xml_find_first(choice, ".//orig"))
      xml_set_text(choice, paste0(orig_text, " "))
    }
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Extensive

```{r results='asis'}
# START OF "EXTENSIVE" CODE
# Read the XML content
xml_file <- read_xml("data/T-E.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.223 to fix "pelerins" repetition
    if (line_count == 223) {
      return("<div style='line-height: 1.2;'>tote ert plaine de pelerins</div>")
    }  
    
    # SPECIAL CASE: Hard-code line v.366 to fix "]cio(n)" repetition
    if (line_count == 366) {
      return("<div style='line-height: 1.2;'>Non pas par bone enten [] cion</div>")
    }
        
    # SPECIAL CASE: Hard-code line v.439 to correct spacing
    if (line_count == 439) {
      return("<div style='line-height: 1.2;'>Virge roine jo croi bien</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.449 to fix "Pere" repetition
    if (line_count == 449) {
      return("<div style='line-height: 1.2;'>molt fu grant merveille del Pere</div>")
    }
      
    # SPECIAL CASE: Hard-code line v.450 to fix "fille" and "Mere" repetition
    if (line_count == 450) {
      return("<div style='line-height: 1.2;'>Quant de sa fille fist sa Mere</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.453 to fix "Pere" repetition
    if (line_count == 453) {
      return("<div style='line-height: 1.2;'>Il fu tes Fiex & fu tes Pere</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.454 to fix "Mere" repetition
    if (line_count == 454) {
      return("<div style='line-height: 1.2;'>Tu fus sa Fille & sa Mere</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.523 to fix "Virge Roine" spacing
    if (line_count == 523) {
      return("<div style='line-height: 1.2;'>Virge Roine coronee</div>")
    }
      
    # SPECIAL CASE: Hard-code line v.703 to correct nesting/repetition issue
    if (line_count == 703) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>O</span>r lairommes ci de Marie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.754 to fix "Deu" repetition
    if (line_count == 754) {
      return("<div style='line-height: 1.2;'>Que soit laissie le Deu service</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.806 to fix "Damledeu" repetition
    if (line_count == 806) {
      return("<div style='line-height: 1.2;'>A Damledeu les commandoit</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.840 to fix "Marie" repetition
    if (line_count == 840) {
      return("<div style='line-height: 1.2;'>la figure vit de Marie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.977 to fix "Zosimas" repetition
    if (line_count == 977) {
      return("<div style='line-height: 1.2;'>dans Zosimas dont li respont</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1127 to fix "Zosimas" repetition
    if (line_count == 1127) {
      return("<div style='line-height: 1.2;'>En son lit jut dans Zosimas</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1495 to fix "Sire Deus" spacing
    if (line_count == 1495) {
      return("<div style='line-height: 1.2;'>Sire Deus loes soies tu</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Now we want to remove any <orig> elements entirely
  orig_elements <- xml_find_all(line, ".//orig")
  xml_remove(orig_elements)
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <reg> tag
    reg_text <- xml_text(xml_find_first(choice, ".//reg"))
    # Replace the <choice> element with the text from the <reg> tag
    xml_set_text(choice, paste0(" ", reg_text, " "))
  }
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

:::

:::
