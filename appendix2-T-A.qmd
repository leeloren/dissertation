---
title: "T-A"
format:
  html:
    page-layout: full
---

# Paris, BnF, Français 23112

Digitization available via Gallica [HERE](https://gallica.bnf.fr/ark:/12148/btv1b9063234c/f337.item.r=MS%2023112).

```{r setup, include=FALSE}
# Load the xml2 package
library(xml2)
```

::: {.column-page-outset}
::: {layout="[[6,6,6]]"}

::: {.column}
## Minimal

```{r results='asis'}
# START OF "MINIMAL" CODE
# Read the XML content
xml_file <- read_xml("data/T-A.xml")

# Extract both <l>, <cb>, and <pb> elements
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.445 to correct spacing
    if (line_count == 445) {
      return("<div style='line-height: 1.2;'>Virgine Roine je croi bien</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.531 to correct spacing
    if (line_count == 531) {
      return("<div style='line-height: 1.2;'>Virge Roine coronee</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1365 to correct spacing
    if (line_count == 1365) {
      return("<div style='line-height: 1.2;'>Biax Peres Rois de majeste</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1367 to correct nesting/repetition issue
    if (line_count == 1367) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>Q</span>nt il ot sorison fenie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1425 to correct nesting/repetition issue
    if (line_count == 1425) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>Q</span>nt li s’. hom vit le lion</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <orig> tag
    orig_text <- xml_text(xml_find_first(choice, ".//orig"))
    # Remove the <choice> element and replace it with the text from the <orig> tag
    xml_set_text(choice, paste0(orig_text, " "))
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Intermediate

```{r results='asis'}
# START OF "INTERMEDIATE" CODE
# Read the XML content
xml_file <- read_xml("data/T-A.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.5 to correct apostrophe
    if (line_count == 5) {
      return("<div style='line-height: 1.2;'>Bien croi que volentiers lorront</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.7 to correct apostrophe
    if (line_count == 7) {
      return("<div style='line-height: 1.2;'>Car a chiaus qui de lui nont cure</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.65 to correct apostrophe
    if (line_count == 65) {
      return("<div style='line-height: 1.2;'>Porche quele ele iert bele & gente</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.71 to correct spacing
    if (line_count == 71) {
      return("<div style='line-height: 1.2;'>Nequit que fust en ceste vie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.81 to correct spacing
    if (line_count == 81) {
      return("<div style='line-height: 1.2;'>Selonguement tiens cest mestier</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.144 to correct apostrophe
    if (line_count == 144) {
      return("<div style='line-height: 1.2;'>Ja plus tart nen faisoit -i- ris</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.174 to correct apostrophe
    if (line_count == 174) {
      return("<div style='line-height: 1.2;'>Naperceussies mesfaichon</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.186 to correct apostrophe
    if (line_count == 186) {
      return("<div style='line-height: 1.2;'>Ja se faichon nen iert escrite</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.350 to correct apostrophe
    if (line_count == 350) {
      return("<div style='line-height: 1.2;'>Miex vaussist qui courust li fus</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.387 to correct apostrophe
    if (line_count == 387) {
      return("<div style='line-height: 1.2;'>Quant vit que [] nient ert de lentree</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.410 to correct apostrophe
    if (line_count == 410) {
      return("<div style='line-height: 1.2;'>Chou li poise quele est vive</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.445 to correct spacing
    if (line_count == 445) {
      return("<div style='line-height: 1.2;'>Virgine Roine je croi bien</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.498 to correct spacing
    if (line_count == 498) {
      return("<div style='line-height: 1.2;'>Ja nentrast hom enparadis</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.518 to correct apostrophe
    if (line_count == 518) {
      return("<div style='line-height: 1.2;'>Conques puis ne cremirent mort</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.531 to correct spacing
    if (line_count == 531) {
      return("<div style='line-height: 1.2;'>Virge Roine coronee</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.570 to correct spacing
    if (line_count == 570) {
      return("<div style='line-height: 1.2;'>Le nuit iprist herbegerie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.645 to correct spacing
    if (line_count == 645) {
      return("<div style='line-height: 1.2;'>Les bras les mains & leslons dois</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.725 to correct apostrophe
    if (line_count == 725) {
      return("<div style='line-height: 1.2;'>Entriax navoit pas symonie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.810 to correct apostrophe
    if (line_count == 810) {
      return("<div style='line-height: 1.2;'>Que nus quens naimme se conte</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.817 to correct apostrophe
    if (line_count == 817) {
      return("<div style='line-height: 1.2;'>& vit que nul nen peut trover</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.918 to correct apostrophe
    if (line_count == 918) {
      return("<div style='line-height: 1.2;'>Je nentent pas que soit raison</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.929 to correct apostrophe
    if (line_count == 929) {
      return("<div style='line-height: 1.2;'>Li vins . le sanc quen issi hors</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.982 to correct apostrophe
    if (line_count == 982) {
      return("<div style='line-height: 1.2;'>Si quele ni avenoit mie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1007 to correct apostrophe
    if (line_count == 1007) {
      return("<div style='line-height: 1.2;'>Ele lemprist a lever</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1020 to correct apostrophe
    if (line_count == 1020) {
      return("<div style='line-height: 1.2;'>Si que ja rien nen celerai</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1135 to correct apostrophe
    if (line_count == 1135) {
      return("<div style='line-height: 1.2;'>Ou quel i eust ja este</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1158 to correct apostrophe
    if (line_count == 1158) {
      return("<div style='line-height: 1.2;'>Bele mere quil le feras</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1271 to correct apostrophe
    if (line_count == 1271) {
      return("<div style='line-height: 1.2;'>Trente ans avoit sierent passe</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1303 to correct spacing
    if (line_count == 1303) {
      return("<div style='line-height: 1.2;'>Enparadis sen va durable</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1308 to correct apostrophe
    if (line_count == 1308) {
      return("<div style='line-height: 1.2;'>Fores dun drapel tot desrompu</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1324 to correct apostrophe
    if (line_count == 1324) {
      return("<div style='line-height: 1.2;'>Conques se chars ne li malmist</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1348 to correct apostrophe
    if (line_count == 1348) {
      return("<div style='line-height: 1.2;'>Pres iere del cors nen savoit mie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1365 to correct spacing
    if (line_count == 1365) {
      return("<div style='line-height: 1.2;'>Biax Peres Rois de majeste</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1367 to correct nesting/repetition issue
    if (line_count == 1367) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>Q</span>uant il ot sorison fenie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1374 to correct apostrophe
    if (line_count == 1374) {
      return("<div style='line-height: 1.2;'>Par un peu quil nestoit tot nus</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1420 to correct apostrophe
    if (line_count == 1420) {
      return("<div style='line-height: 1.2;'>la saproisma ou li cors ert</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1425 to correct nesting/repetition issue
    if (line_count == 1425) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>Q</span>uant li sains hom vit le lion</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1441 to correct spacing
    if (line_count == 1441) {
      return("<div style='line-height: 1.2;'>Que parmi vielt estre enfoie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1466 to correct apostrophe
    if (line_count == 1466) {
      return("<div style='line-height: 1.2;'>El sarcus lont entriax -ii- mis</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1483 to correct apostrophe
    if (line_count == 1483) {
      return("<div style='line-height: 1.2;'>Quant Zosimaslen vit torner</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1515 to correct apostrophe
    if (line_count == 1515) {
      return("<div style='line-height: 1.2;'>Ni ot nul qui namendast se vie</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Check if the <choice> element contains <abbr> and <expan>
    abbr_exists <- xml_find_first(choice, ".//abbr")
    expan_exists <- xml_find_first(choice, ".//expan")
    
    if (!is.na(abbr_exists) && !is.na(expan_exists)) {
      # If <abbr> and <expan> tags exist, extract only the <reg> text from <expan>
      reg_text <- xml_text(xml_find_first(choice, ".//expan/reg"))
      xml_set_text(choice, paste0(reg_text, " "))
    } else {
      # For non-abbreviation choices, keep original behavior
      orig_text <- xml_text(xml_find_first(choice, ".//orig"))
      xml_set_text(choice, paste0(orig_text, " "))
    }
  }
  
  # Now we want to remove any <reg> elements entirely
  reg_elements <- xml_find_all(line, ".//reg")
  xml_remove(reg_elements)
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

::: {.column}
## Extensive

```{r results='asis'}
# START OF "EXTENSIVE" CODE
# Read the XML content
xml_file <- read_xml("data/T-A.xml")

# Extract the <l>, <cb>, and <pb> elements inside the <text> element
lines <- xml_find_all(xml_file, "//text//l | //text//cb | //text//pb")

# Initialize an empty list to store the processed lines
processed_lines <- list()

# Initialize line counter
line_count <- 0

# Function to process each element
process_line <- function(line) {
  # Handle page breaks differently
  if (xml_name(line) == "pb") {
    # Get folio number and format as standalone line
    folio_num <- xml_attr(line, "n")
    return(sprintf("<div class='folio-number'>%s</div>", folio_num))
  }
  
  # Only increment line count for verse lines
  if (xml_name(line) == "l") {
    line_count <<- line_count + 1
    
    # SPECIAL CASE: Hard-code line v.410 to correct spacing
    if (line_count == 410) {
      return("<div style='line-height: 1.2;'>Chou li poise qu'ele est vive</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.445 to correct spacing
    if (line_count == 445) {
      return("<div style='line-height: 1.2;'>Virgine Roine je croi bien</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.531 to correct spacing
    if (line_count == 531) {
      return("<div style='line-height: 1.2;'>Virge Roine coronee</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1365 to correct spacing
    if (line_count == 1365) {
      return("<div style='line-height: 1.2;'>Biax Peres Rois de majeste</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1367 to correct nesting/repetition issue
    if (line_count == 1367) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>Q</span>uant il ot s’orison fenie</div>")
    }
    
    # SPECIAL CASE: Hard-code line v.1425 to correct nesting/repetition issue
    if (line_count == 1425) {
      return("<div style='line-height: 1.2;'><span class='decorative-initial' data-size='2'>Q</span>uant li sains hom vit le lion</div>")
    }
    
    # Add line number div every 5th line
    line_number <- if (line_count %% 5 == 0) {
      sprintf("<div class='line-number'>%d</div>", line_count)
    } else {
      ""
    }
  } else {
    line_number <- ""
  }
  
  # Process emph elements (decorative initials)
  emph_elements <- xml_find_all(line, ".//emph")
  for (emph in emph_elements) {
    # Get the initial letter text
    initial_letter <- xml_text(emph)
    
    # Get the size attribute (n) and style attribute (rend)
    size_attr <- xml_attr(emph, "n")
    style_attr <- xml_attr(emph, "rend")
    
    # Create the HTML for the styled initial
    styled_initial <- sprintf('<span class="decorative-initial %s" data-size="%s">%s</span>', 
                             style_attr, size_attr, initial_letter)
    
    # Replace the emph element with the styled HTML
    xml_text(emph) <- styled_initial
  }
  
  # Now we want to remove any <orig> elements entirely
  orig_elements <- xml_find_all(line, ".//orig")
  xml_remove(orig_elements)
  
  # Find all <choice> elements within the line
  choices <- xml_find_all(line, ".//choice")
  for (choice in choices) {
    # Extract the text from the <reg> tag
    reg_text <- xml_text(xml_find_first(choice, ".//reg"))
    # Replace the <choice> element with the text from the <reg> tag
    xml_set_text(choice, paste0(" ", reg_text, " "))
  }
  
  # Replace <lb/> tags with HTML line break
  lb_elements <- xml_find_all(line, ".//lb")
  for (lb in lb_elements) {
    xml_set_text(lb, "")
  }
  
  # Return line with number if applicable - using xml_text() instead of as.character()
  return(sprintf("<div style='line-height: 1.2;'>%s%s</div>", 
                line_number, xml_text(line)))
}

# Process each line and wrap with <div class='column-break'> at each <cb/>
for (line in lines) {
  if (xml_name(line) == "cb") {
    # Add a closing </div> for the previous column and an opening <div> for the new column
    processed_lines <- c(processed_lines, "</div>", "<div class='column-break'>")
  } else {
    # Process the line and add it to the current column
    processed_lines <- c(processed_lines, process_line(line))
  }
}

# Process lines and wrap in edition-text div
formatted_text <- paste(c("<div class='edition-text'>", processed_lines, "</div>"), collapse = "\n")
cat(formatted_text)

```

:::

:::

:::
